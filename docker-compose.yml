services:
  proxy:
    image: traefik:v2.9.8
    networks:
      - traefik-public
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `localhost`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      - "--api.insecure=true"
    ports:
      - "80:80"
      - "443:443"      
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        - traefik.constraint-label=traefik-public
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.middlewares.goyangi-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.goyangi-https-redirect.redirectscheme.permanent=true
        # Handle host with and without "www" to redirect to only one of them
        # Uses environment variable DOMAIN
        # To disable www redirection remove the Host() you want to discard, here and
        # below for HTTPS
        - traefik.http.routers.goyangi-proxy-http.rule=Host(`localhost`) || Host(`www.localhost`)
        - traefik.http.routers.goyangi-proxy-http.entrypoints=http
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.goyangi-proxy-https.rule=Host(`localhost`) || Host(`www.localhost`)
        - traefik.http.routers.goyangi-proxy-https.entrypoints=https
        - traefik.http.routers.goyangi-proxy-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.goyangi-proxy-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.goyangi-proxy.loadbalancer.server.port=80
        # Handle domain with and without "www" to redirect to only one
        # To disable www redirection remove the next line
        - traefik.http.middlewares.goyangi-www-redirect.redirectregex.regex=^https?://(www.)?(localhost)/(.*)
        # Redirect a domain with www to non-www
        # To disable it remove the next line
        - traefik.http.middlewares.goyangi-www-redirect.redirectregex.replacement=https://localhost/$${3}
        # Redirect a domain without www to www
        # To enable it remove the previous line and uncomment the next
        # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
        # Middleware to redirect www, to disable it remove the next line 
        - traefik.http.routers.goyangi-proxy-https.middlewares=goyangi-www-redirect
        # Middleware to redirect www, and redirect HTTP to HTTPS
        # to disable www redirection remove the section: goyangi-www-redirect,
        - traefik.http.routers.goyangi-proxy-http.middlewares=goyangi-www-redirect,goyangi-https-redirect

  db:
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
      - ./db/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql    
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - PGDATA=/var/lib/postgresql/data/pgdata
    restart: always
    deploy:
      placement:
        constraints:
          - node.labels.goyangi.app-db-data == true

  pgadmin:
    image: dpage/pgadmin4
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - PGADMIN_LISTEN_PORT=5050
      - PGADMIN_DEFAULT_EMAIL=goyangi@pgadmin.com
      - PGADMIN_DEFAULT_PASSWORD=1234
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.goyangi-pgadmin-http.rule=Host(`pgadmin.localhost`)
        - traefik.http.routers.goyangi-pgadmin-http.entrypoints=http
        - traefik.http.routers.goyangi-pgadmin-http.middlewares=goyangi-https-redirect
        - traefik.http.routers.goyangi-pgadmin-https.rule=Host(`pgadmin.localhost`)
        - traefik.http.routers.goyangi-pgadmin-https.entrypoints=https
        - traefik.http.routers.goyangi-pgadmin-https.tls=true
        - traefik.http.routers.goyangi-pgadmin-https.tls.certresolver=le
        - traefik.http.services.goyangi-pgadmin.loadbalancer.server.port=5050

  backend:
    image: 'goyangi-backend:${TAG-latest}'
    depends_on:
      - db
    environment:
      - SERVER_NAME=localhost
      - SERVER_HOST=https://localhost
      # Allow explicit env var override for tests
      - SMTP_HOST=localhost
    build:
      context: .
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=localhost
        - traefik.http.routers.goyangi-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/swagger`)      
        - traefik.http.services.goyangi-backend.loadbalancer.server.port=80
 
  frontend:
    image: 'goyangi-frontend:${TAG-latest}'
    build:
      context: ./frontend/vuejs
      args:
        FRONTEND_ENV: ${FRONTEND_ENV-production}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=localhost
        - traefik.http.routers.goyangi-frontend-http.rule=PathPrefix(`/`)
        - traefik.http.services.goyangi-frontend.loadbalancer.server.port=80

volumes:
  app-db-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
